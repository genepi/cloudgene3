{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<ul> <li>Build your analysis pipeline in Nextflow</li> <li>Integrate your analysis pipeline into Cloudgene by writing a simple configuration file</li> <li>Get a powerful web application with user management, data transfer, error handling and more</li> <li>Deploy your application with one click to in-house clusters or public Clouds like Amazon AWS</li> <li>Offer your application as SaaS to other scientists, managing thousands of jobs</li> <li>Share your application, enabling others to clone your service to their own hardware or private cloud instance</li> </ul>"},{"location":"#cloudgene-3","title":"Cloudgene 3","text":""},{"location":"#turn-your-nextflow-pipeline-into-a-powerful-web-service","title":"Turn Your Nextflow Pipeline into a Powerful Web Service","text":"<p> Getting Started  Installation  Source</p> <p>Documentation of Cloudgene 2</p>"},{"location":"#integrate-your-nextflow-pipelines","title":"Integrate Your Nextflow pipelines","text":"<p>Integrate your analysis pipeline into Cloudgene by writing a simple configuration file.</p>  cloudgene.yaml Web-Interface Results <pre><code>id: fetch-ngs\nname: FetchNGS\ndescription: Pipeline to fetch metadata and raw FastQ files from public databases\nversion: 1.12.0\nwebsite: https://github.com/nf-core/fetchngs\nworkflow:\n  steps:\n    - name: Fetch NGS\n      script: nf-core/fetchngs\n      revision: 1.12.0\n\n  inputs:\n    - id: input\n      description: IDs\n      type: textarea\n      value: \"SRR12696236\"\n      writeFile: \"ids.csv\"\n\n  outputs:\n    - id: outdir\n      description: Output\n      type: folder\n</code></pre> <p></p> <p></p>"},{"location":"#share-your-pipeline","title":"Share your pipeline","text":"<p>Share your application via HTTP, GitHub, or S3, and enable users to install it with a simple command.</p> <pre><code>cloudgene install lukfor/cg-fetchngs\n</code></pre>"},{"location":"#combine-your-nextflow-pipeline-with-others","title":"Combine Your Nextflow pipeline with others","text":"<p>Combine your Nextflow pipeline with other pipelines and create use-case specific web services.</p>  cloudgene.yaml Web-Interface Results <pre><code>id: taxprofiler\nname: Taxprofiler\ndescription: Taxonomic classification and profiling of shotgun short- and long-read metagenomic data\nversion: 1.1.8\nwebsite: https://github.com/nf-core/taxprofiler\nauthor: James A. Fellows Yates, Sofia Stamouli, Moritz E. Beber, and the nf-core/taxprofiler team\nlogo: https://raw.githubusercontent.com/nf-core/fetchngs/master/docs/images/nf-core-fetchngs_logo_light.png\n\nworkflow:\n  steps:\n    - name: Fetch Data\n      script: nf-core/fetchngs\n      revision: 1.12.0\n      stdout: true\n      params:\n        input: \"${input_ids}\"\n\n    - name: Run taxprofiler\n      script: nf-core/taxprofiler\n      revision: 1.1.8\n      stdout: true\n      params:\n        input: \"${outdir}/samplesheet/samplesheet.csv\"\n        databases: \"https://raw.githubusercontent.com/nf-core/test-datasets/taxprofiler/database_full_v1.2.csv\"\n        multiqc_title: \"${CLOUDGENE_JOB_NAME}\"\n\n  inputs:\n    - id: input_ids\n      description: IDs\n      type: textarea\n      value: \"SRR12696236\"\n      writeFile: \"ids.csv\"\n      serialize: false\n\n  outputs:\n    - id: outdir\n      description: Output\n      type: folder\n</code></pre> <p></p> <p></p>"},{"location":"#who-uses-cloudgene","title":"Who uses Cloudgene?","text":""},{"location":"#michigan-imputation-server","title":"Michigan Imputation Server","text":""},{"location":"#mtdna-server","title":"mtDNA-Server","text":""},{"location":"#citation","title":"Citation","text":"<p>Sch\u00f6nherr S, Forer L, Wei\u00dfensteiner H, Kronenberg F, Specht G, Kloss-Brandst\u00e4tter A. Cloudgene: a graphical execution platform for MapReduce programs on private and public clouds. BMC Bioinformatics. 2012 Aug 13;13:200. doi: 10.1186/1471-2105-13-200. PMID: 22888776; PMCID: PMC3532373.</p>"},{"location":"#about","title":"About","text":"<p>Cloudgene has been created by Lukas Forer and Sebastian Sch\u00f6nherr and is MIT Licensed.</p> <p> </p> <p>Thanks to all the contributors to help us maintaining and improving Cloudgene!</p>"},{"location":"about/","title":"About","text":"<p>Cloudgene has been created by Lukas Forer and Sebastian Sch\u00f6nherr and is MIT Licensed.</p> <p> </p>"},{"location":"installation/","title":"Installation","text":"<p>This page helps you to install, configure and running Cloudgene.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<p>You will need the following things properly installed on your computer.</p> <ul> <li>Java 17 or higher</li> <li>Nextflow</li> </ul>"},{"location":"installation/#optional","title":"Optional","text":"<ul> <li>Docker</li> <li>MySQL Server</li> </ul>"},{"location":"installation/#download-and-installation","title":"Download and Installation","text":"<p>Download the latest version from our download page using the following commands:</p> <pre><code>curl -fsSL https://get.cloudgene.io | bash\n</code></pre> <p>If you don't have curl installed, you could use wget:</p> <pre><code>wget -qO- https://get.nf-test.com | bash\n</code></pre> <p>Test the installation with the following command:</p> <pre><code>./cloudgene version\n</code></pre> <p>Now you are ready to start Cloudgene and install applications.</p>"},{"location":"installation/#manual-installation","title":"Manual installation","text":"<p>All releases are also available on Github.</p>"},{"location":"api/authentication/","title":"Authentication","text":"<p>Cloudgene uses a token-based authentication. The token is required for all future interaction with the server. The token can be created and downloaded from your user profile.</p> <p>TODO: Screenshot and HowTo</p>"},{"location":"api/introduction/","title":"API Reference","text":"<p>The REST APIs provide programmatic ways to submit new jobs and to download data from a Cloudgene instance. The REST API identifies users using authentication tokens, responses are provided in JSON.</p>"},{"location":"api/job-details/","title":"Job Details","text":""},{"location":"api/job-details/#get-jobsiddetails","title":"<code>GET /jobs/{id}/details</code>","text":""},{"location":"api/job-details/#examples","title":"Examples","text":""},{"location":"api/job-details/#curl","title":"curl","text":"<pre><code>curl --H \"X-Auth-Token: &lt;your-API-token&gt;\" https://imputationserver.sph.umich.edu/api/v2/jobs/job-20160504-155023/details\n</code></pre> <pre><code>{\n    \"application\": \"Michigan Imputation Server (Experimental Mode) (Minimac3 1.0.13 - Cloudgene 1.13.0)\",\n    \"applicationId\": \"minimac-admin\",\n    \"deletedOn\": -1,\n    \"endTime\": 1462020562930,\n    \"executionTime\": 86610091,\n    \"id\": \"job-20160429-084540\",\n    \"logs\": \"logs/job-20160429-084540\",\n    \"name\": \"job-20160429-084540\",\n  \"positionInQueue\": 0,\n    \"running\": false,\n    \"startTime\": 1461933952839,\n    \"state\":,  \n    \"outputParams\": [{\n        \"description\": \"Quality-Control Results\",\n        \"files\": [{\n            \"count\": 10,\n            \"hash\": \"784c0243396e23221a8eb6d7efbad906\",\n            \"name\": \"qcreport.html\",\n            \"parameterId\": 201692,\n            \"path\": \"job-20160429-084540/qcreport/qcreport.html\",\n            \"size\": \"17 KB\",\n            \"username\": \"admin\"\n        }],\n        \"format\": \"\",\n        \"id\": 201692,\n        \"input\": false,\n        \"name\": \"qcreport\",\n        \"type\": \"local-file\",\n        \"zip\": false\n    }, {\n        \"description\": \"Imputation Report\",\n        \"files\": [{\n            \"count\": 10,\n            \"hash\": \"50baaf1e09c098dae097065303816252\",\n            \"name\": \"report\",\n            \"parameterId\": 201693,\n            \"path\": \"job-20160429-084540/report/report\",\n            \"size\": \"1 KB\",\n            \"username\": \"admin\"\n        }],\n        \"format\": \"\",\n        \"id\": 201693,\n        \"input\": false,\n        \"name\": \"report\",\n        \"type\": \"local-file\",\n        \"zip\": false\n    }, {\n        \"description\": \"Imputation Results\",\n        \"files\": [{\n            \"count\": 9,\n            \"hash\": \"3f993d442b62a432489cdeb0a1e6f2bd\",\n            \"name\": \"chr_20.zip\",\n            \"parameterId\": 201695,\n            \"path\": \"job-20160429-084540/local/chr_20.zip\",\n            \"size\": \"2 GB\",\n            \"username\": \"admin\"\n        }],\n        \"format\": \"\",\n        \"id\": 201695,\n        \"input\": false,\n        \"name\": \"local\",\n        \"type\": \"local-folder\",\n        \"zip\": false\n    }],\n    \"steps\": [{\n        \"id\": 38445,\n        \"logMessages\": [{\n            \"message\": \"File Import successful. \",\n            \"time\": 1462020565636,\n            \"type\": 0\n        }, {\n            \"message\": \"1 valid VCF file(s) found.\\n\\nSamples: 10080\\nChromosomes: 20\\nSNPs: 17220\\nChunks: 7\\nDatatype: phased\\nReference Panel: hrc.r1.1.2016\\nPhasing: eagle\",\n            \"time\": 1462020565636,\n            \"type\": 0\n        }],\n        \"name\": \"Input Validation\",\n        \"up\": null\n    }, {\n        \"id\": 38446,\n        \"logMessages\": [{\n            \"message\": \"Execution successful.\",\n            \"time\": 1462020565636,\n            \"type\": 0\n        }, {\n            \"message\": \"&lt;b&gt;Statistics:&lt;\\/b&gt; &lt;br&gt;Alternative allele frequency &gt; 0.5 sites: 4,443&lt;br&gt;Reference Overlap: 100.00% &lt;br&gt;Match: 16,621&lt;br&gt;Allele switch: 0&lt;br&gt;Strand flip: 0&lt;br&gt;Strand flip and allele switch: 0&lt;br&gt;A/T, C/G genotypes: 0&lt;br&gt;&lt;b&gt;Filtered sites:&lt;\\/b&gt; &lt;br&gt;Filter flag set: 0&lt;br&gt;Invalid alleles: 0&lt;br&gt;Duplicated sites: 0&lt;br&gt;NonSNP sites: 0&lt;br&gt;Monomorphic sites: 564&lt;br&gt;Allele mismatch: 35&lt;br&gt;SNPs call rate &lt; 90%: 0\",\n            \"time\": 1462020565636,\n            \"type\": 0\n        }, {\n            \"message\": \"Excluded sites in total: 599&lt;br&gt;Remaining sites in total: 16,621&lt;br&gt;\",\n            \"time\": 1462020565636,\n            \"type\": 2\n        }],\n        \"name\": \"Quality Control\",\n        \"up\": null\n    }, {\n        \"id\": 38447,\n        \"logMessages\": [{\n            \"message\": \"Execution successful.\",\n            \"time\": 1462020565636,\n            \"type\": 0\n        }],\n        \"name\": \"Quality Control (Report)\",\n        \"up\": null\n    }, {\n        \"id\": 38448,\n        \"logMessages\": [{\n            \"message\": \"&lt;span class=\\\"badge badge-success\\\" style=\\\"width: 40px\\\"&gt;Chr 20&lt;\\/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=\\\"badge\\\" style=\\\"width: 8px\\\"&gt;&amp;nbsp;&lt;\\/span&gt; Waiting&lt;br&gt;&lt;span class=\\\"badge badge-info\\\" style=\\\"width: 8px\\\"&gt;&amp;nbsp;&lt;\\/span&gt; Running&lt;br&gt;&lt;span class=\\\"badge badge-success\\\" style=\\\"width: 8px\\\"&gt;&amp;nbsp;&lt;\\/span&gt; Complete\",\n            \"time\": 1462020565636,\n            \"type\": 0\n        }],\n        \"name\": \"Pre-phasing and Imputation\",\n        \"up\": null\n    }, {\n        \"id\": 38449,\n        \"logMessages\": [{\n            \"message\": \"Execution successful.\",\n            \"time\": 1462020565645,\n            \"type\": 0\n        }],\n        \"name\": \"Imputation (Report)\",\n        \"up\": null\n    }, {\n        \"id\": 38450,\n        \"logMessages\": [{\n            \"message\": \"Exported data.\",\n            \"time\": 1462020565655,\n            \"type\": 0\n        }, {\n            \"message\": \"We have sent an email to &lt;b&gt;sebastian.schoenherr@uibk.ac.at&lt;\\/b&gt; with the password.\",\n            \"time\": 1462020565655,\n            \"type\": 0\n        }],\n        \"name\": \"Data Compression and Encryption\",\n        \"up\": null\n    }]\n}\n</code></pre>"},{"location":"api/job-status/","title":"Job Status","text":""},{"location":"api/job-status/#jobsidstatus","title":"<code>/jobs/{id}/status</code>","text":""},{"location":"api/job-status/#examples","title":"Examples","text":""},{"location":"api/job-status/#curl","title":"curl","text":"<pre><code>curl-H \"X-Auth-Token: &lt;your-API-token&gt;\" https://imputationserver.sph.umich.edu/api/v2/jobs/job-20160504-155023/status\n</code></pre> <pre><code>{\n  \"application\":\"Michigan Imputation Server (Minimac3 1.0.13 - Cloudgene 1.13.0)\",\n  \"applicationId\":\"minimac\",\n  \"deletedOn\":-1,\n  \"endTime\":1462369824173,\n  \"executionTime\":0,\n  \"id\":\"job-20160504-155023\",\n  \"logs\":\"\",\n  \"name\":\"job-20160504-155023\",\n  \"outputParams\":[],\n  \"positionInQueue\":0,\n  \"running\":false,\n  \"startTime\":1462369824173,\n  \"state\":5\n  ,\"steps\":[]\n}\n</code></pre>"},{"location":"api/job-submission/","title":"Submit Job","text":"<p>The API allows to set several imputation parameters. Data need to be specified in vcf.gz or in the 23andMe data format (txt or zip).</p>"},{"location":"api/job-submission/#post-jobssubmitapp","title":"<code>POST /jobs/submit/{$app}</code>","text":"<p>The following parameters can be set:</p> Parameter Values Default Value input-files /path/to/file input-mode qconly, imputation imputation input-files-source file-upload, sftp, http default: file-upload input-refpanel hapmap2, phase1, phase3, hrc.r1.1.2016, caapa phase3 input-phasing eagle, hapiur, shapeit eagle input-population eur, afr, asn, amr, sas, eas, AA, mixed eur"},{"location":"api/job-submission/#examples","title":"Examples","text":""},{"location":"api/job-submission/#curl","title":"curl","text":"<pre><code>curl -H \"X-Auth-Token: &lt;your-API-token&gt;\" -F \"input-files=@/path/to/genome.vcf.gz\" -F \"input-refpanel=hapmap2\" -F \"input-phasing=shapeit\" https://imputationserver.sph.umich.edu/api/v2/jobs/submit/minimac\n</code></pre> <pre><code>curl -H \"X-Auth-Token: &lt;your-API-token&gt;\" -F \"input-files=http://warehouse.pgp-hms.org/warehouse/165ead886710368efd2d91624aa74f72+89/genome_v4_Full_20160602094938.txt\" -F \"input-files-source=http\" -F \"input-mode=qc\" -F \"input-mode=imputation\" -F \"input-refpanel=hrc.r1.1.2016\" https://imputationserver.sph.umich.edu/api/v2/jobs/submit/minimac\n</code></pre> <pre><code>{\n  \"id\":\"job-20160504-155023\",\n  \"message\":\"Your job was successfully added to the job queue.\",\n  \"success\":true\n}\n</code></pre>"},{"location":"api/job-submission/#python","title":"Python","text":"<pre><code>import requests\nimport json\n\n# imputation server url\nurl = 'https://imputationserver.sph.umich.edu/api/v2'\n\n# add token to header (see authentication)\nheaders = {'X-Auth-Token' : token }\n\n# submit new job\nvcf = '/path/to/genome.vcf.gz';\nfiles = {'input-files' : open(vcf, 'rb')}\nr = requests.post(url + \"/jobs/submit/minimac\", files=files, headers=headers)\nif r.status_code != 200:\n    raise Exception('POST /jobs/submit/minimac {}'.format(r.status_code))\n\n# print message\nprint r.json()['message']\nprint r.json()['id']\n</code></pre>"},{"location":"api/list-jobs/","title":"List Jobs","text":"<p>All running jobs can be returned as JSON objects at once.</p>"},{"location":"api/list-jobs/#get-jobs","title":"<code>GET /jobs</code>","text":""},{"location":"api/list-jobs/#examples","title":"Examples","text":""},{"location":"api/list-jobs/#curl","title":"curl","text":"<pre><code>curl -H \"X-Auth-Token: &lt;your-API-token&gt;\" https://imputationserver.sph.umich.edu/api/v2/jobs\n</code></pre> <pre><code>[\n  {\n    \"applicationId\":\"minimac\",\n    \"executionTime\":0,\n    \"id\":\"job-20160504-155023\",\n    \"name\":\"job-20160504-155023\",\n    \"positionInQueue\":0,\n    \"running\":false,\n    \"state\":5\n  },{\n    \"applicationId\":\"minimac\",\n    \"executionTime\":0,\n    \"id\":\"job-20160420-145809\",\n    \"name\":\"job-20160420-145809\",\n    \"positionInQueue\":0,\n    \"running\":false,\n    \"state\":5\n  },{\n    \"applicationId\":\"minimac\",\n    \"executionTime\":0,\n    \"id\":\"job-20160420-145756\",\n    \"name\":\"job-20160420-145756\",\n    \"positionInQueue\":0,\n    \"running\":false,\n    \"state\":5\n  }\n]\n</code></pre>"},{"location":"api/list-jobs/#python","title":"Python","text":"<pre><code>import requests\nimport json\n\n# imputation server url\nurl = 'https://imputationserver.sph.umich.edu/api/v2'\n\n# add token to header (see authentication)\nheaders = {'X-Auth-Token' : token }\n\n# get all jobs\nr = requests.get(url + \"/jobs\", headers=headers)\nif r.status_code != 200:\n    raise Exception('GET /jobs/ {}'.format(r.status_code))\n\n# print all jobs\nfor job in r.json():\n    print('{} [{}]'.format(job['id'], job['state']))\n</code></pre> <p>Todo:</p> <ul> <li>remove positionInQueue</li> <li>replace states with constants (e.g. RUNNING, WAITING, ...)</li> </ul>"},{"location":"cli/cloudgene-clone/","title":"<code>cloudgene clone</code>","text":"<p>Installs all application defined the repository file.</p>"},{"location":"cli/cloudgene-clone/#command","title":"Command","text":"<pre><code>cloudgene clone &lt;repository-file&gt;\n</code></pre>"},{"location":"cli/cloudgene-clone/#parameters","title":"Parameters","text":"Parameter Required Description <code>&lt;repository-file&gt;</code> yes The location of the repository file. This could be a URL or the filename of a local yaml file"},{"location":"cli/cloudgene-clone/#examples","title":"Examples","text":""},{"location":"cli/cloudgene-github-install/","title":"<code>cloudgene github-install</code>","text":"<p>Installs an application from a GitHub repo to your local repository.</p> <p>This command is deprecated. Please use <code>cloudgene install user/repo</code></p>"},{"location":"cli/cloudgene-github-install/#command","title":"Command","text":"<pre><code>cloudgene github-install &lt;owner&gt;/&lt;repository&gt;[/&lt;subdir&gt;]\n</code></pre>"},{"location":"cli/cloudgene-github-install/#parameters","title":"Parameters","text":"Parameter Required Description <code>&lt;repository&gt;</code> yes The GitHub repository of the application"},{"location":"cli/cloudgene-github-install/#examples","title":"Examples","text":"<p>Install application from GitHub repository <code>lukfor/hello-cloudgene</code>:</p> <pre><code>cloudgene github-install lukfor/hello-cloudgene\n</code></pre> <p>Install application from a subdirectory in GitHub repository <code>genepi/cloudgene-examples</code>:</p> <pre><code>cloudgene github-install genepi/cloudgene-examples/fastqc\n</code></pre> <p>Install a certain version (tag or release):</p> <pre><code>cloudgene github-install lukfor/hello-cloudgene@v1.2.0\n</code></pre>"},{"location":"cli/cloudgene-install/","title":"<code>cloudgene install</code>","text":"<p>Installs an application from a zip file or a cloudgene.yaml file to your local repository.</p>"},{"location":"cli/cloudgene-install/#command","title":"Command","text":"<pre><code>cloudgene install &lt;location&gt;\n</code></pre>"},{"location":"cli/cloudgene-install/#parameters","title":"Parameters","text":"Parameter Required Description <code>&lt;location&gt;</code> yes The location of the application. This could be a URL to zip or yaml file or the filename of a local zip or yaml file. Moreover,  it can be the name of a github repository in the following format <code>&lt;owner&gt;/&lt;repository&gt;[/&lt;subdir&gt;]</code>"},{"location":"cli/cloudgene-install/#examples","title":"Examples","text":""},{"location":"cli/cloudgene-install/#http-urls","title":"Http Urls","text":"<p>Install application from a URL:</p> <pre><code>cloudgene install http://myserver.com/myapplication.zip\n</code></pre>"},{"location":"cli/cloudgene-install/#local-file","title":"Local File","text":"<p>Install application from a zip file:</p> <pre><code>cloudgene install /path/to/myapplication.zip\n</code></pre> <p>Install application from a cloudgene.yaml file:</p> <pre><code>cloudgene install /path/to/myapplication/cloudgene.yaml\n</code></pre>"},{"location":"cli/cloudgene-install/#github","title":"GitHub","text":"<p>Install application from GitHub repository <code>lukfor/hello-cloudgene</code>:</p> <pre><code>cloudgene install lukfor/hello-cloudgene\n</code></pre> <p>Install application from a subdirectory in GitHub repository <code>genepi/cloudgene-examples</code>:</p> <pre><code>cloudgene install genepi/cloudgene-examples/fastqc\n</code></pre> <p>Install a certain version (tag or release):</p> <pre><code>cloudgene install lukfor/hello-cloudgene@v1.2.0\n</code></pre>"},{"location":"cli/cloudgene-ls/","title":"<code>cloudgene ls</code>","text":"<p>Displays a list of all installed applications containing the name and the version of an application and indicates if an application has no syntax errors.</p>"},{"location":"cli/cloudgene-ls/#command","title":"Command","text":"<pre><code>cloudgene ls\n</code></pre>"},{"location":"cli/cloudgene-remove/","title":"<code>cloudgene remove</code>","text":"<p>Removes an application from your local repository.</p>"},{"location":"cli/cloudgene-remove/#command","title":"Command","text":"<pre><code>cloudgene remove &lt;app_id&gt;\n</code></pre>"},{"location":"cli/cloudgene-remove/#parameters","title":"Parameters","text":"Parameter Required Description <code>&lt;app_id&gt;</code> yes The `id of an installed application."},{"location":"cli/cloudgene-run/","title":"<code>cloudgene run</code>","text":"<p>Executes a Cloudgene workflow on the command line. All input parameters of a workflow can be set through command-line paramters.</p>"},{"location":"cli/cloudgene-run/#command","title":"Command","text":"<pre><code>cloudgene run &lt;app_or_filename&gt; &lt;params&gt; [--conf &lt;hadoop_conf_dir&gt;] [--user &lt;hadoop_username&gt;][--no-logging] [--no-output]\n</code></pre>"},{"location":"cli/cloudgene-run/#parameters","title":"Parameters","text":"Parameter Required Description <code>&lt;app_or_filename&gt;</code> yes The location of a cloudgene.yaml file or the id of an installed application. <code>&lt;params&gt;</code> yes All input parameters of a workflow have to be set through the commandline. For example, if a input-paramter with id <code>input</code> was defined and is required, then the corresponding commandline-paramter is <code>--input &lt;value&gt;</code> <code>--conf &lt;hadoop_conf_dir&gt;</code> no Path to Hadoop configuration folder (e.g. <code>/etc/hadoop/conf</code>)) <code>--user &lt;hadoop_username&gt;</code> no Execute Hadoop steps on behalf of this username (default: cloudgene) <code>--output</code> no Define a custom output folder (default: ./job_id). <code>--show-log</code> no Stream logging messages to terminal. <code>--show-output</code> no Stream output to terminal. <code>--force</code> no Force Cloudgene to reinstall application in HDFS even if it already installed."},{"location":"cli/cloudgene-run/#examples","title":"Examples","text":""},{"location":"cli/cloudgene-server/","title":"<code>cloudgene server</code>","text":"<p>Starts the Cloudgene web-application which provides an user-interface to submit jobs for all installed workflows.</p>"},{"location":"cli/cloudgene-server/#command","title":"Command","text":"<pre><code>cloudgene server [--conf &lt;hadoop_conf_dir&gt;] [--user &lt;hadoop_username&gt;] [--port &lt;port&gt;]\n</code></pre>"},{"location":"cli/cloudgene-server/#parameters","title":"Parameters","text":"Parameter Required Description <code>--conf &lt;hadoop_conf_dir&gt;</code> no Path to Hadoop configuration folder (e.g. <code>/etc/hadoop/conf</code>)) <code>--user &lt;hadoop_username&gt;</code> no Execute Hadoop steps on behalf of this username (default: cloudgene) <code>--port &lt;port&gt;</code> no Start the web-application on this port (default: 8082)"},{"location":"cli/cloudgene-server/#examples","title":"Examples","text":""},{"location":"cli/cloudgene-server/#start-server","title":"Start server","text":"<pre><code>cloudgene server\n</code></pre> <p>The webservice is available on http://localhost:8082. Please use username <code>admin</code> and password <code>admin1978</code> to login. You can use the <code>--port</code> flag to change the port from <code>8082</code> to <code>8085</code>:</p> <pre><code>cloudgene server --port 8085\n</code></pre>"},{"location":"cli/cloudgene-server/#start-server-and-connect-it-with-a-hadoop-cluster","title":"Start server and connect it with a Hadoop Cluster","text":"<p>If Cloudgene is installed on the Hadoop Namenode, then you can start the server with the conf files located in <code>$HADOOP/conf</code>:</p> <pre><code>cloudgene server --conf /etc/hadoop/conf\n</code></pre> <p>However, if Cloudgene is not installed on the Hadoop Namenode, then you have to copy the config files from the Hadoop Namenode to your Cloudgene instance and start the server with this configurations:</p> <pre><code>cloudgene server --conf  $CLOUDGENE_HOME/hadoop-conf\n</code></pre> <p>Cloudgene executes your MapReduce steps on the remote cluster. You can use the <code>--user</code> flag to set the username which should be used to execute your Hadoop jobs (e.g. it uses the HDFS directory of this user for all files).</p> <p>For production we recommend to add your cluster to the configuration file to avoid to set the parameters on each startup. More about adding the cluster to the configuration file can be found here.</p>"},{"location":"cli/cloudgene-validate/","title":"<code>cloudgene validate</code>","text":"<p>Checks if a cloudgene.yaml file or an installed application has no syntax errors and is valid.</p>"},{"location":"cli/cloudgene-validate/#command","title":"Command","text":"<pre><code>cloudgene validate &lt;app_or_filename&gt;\n</code></pre>"},{"location":"cli/cloudgene-validate/#parameters","title":"Parameters","text":"Parameter Required Description <code>&lt;app_or_filename&gt;</code> yes The location of a cloudgene.yaml file or the `id of an installed application."},{"location":"cli/cloudgene-version/","title":"<code>cloudgene version</code>","text":"<p>Prints the version of the current installed Cloudgene CLI.</p>"},{"location":"cli/cloudgene-version/#command","title":"Command","text":"<pre><code>cloudgene version\n</code></pre>"},{"location":"developers/datasets/","title":"Datasets","text":""},{"location":"developers/datasets/#tutorial-taxprofiler-pipeline-with-dataset-integration-using-cloudgene","title":"Tutorial: Taxprofiler Pipeline with Dataset Integration Using Cloudgene","text":"<p>In this tutorial, we will adapt the <code>taxprofiler</code> pipeline for taxonomic classification and profiling of metagenomic data using Cloudgene. The pipeline will be configured to integrate with datasets, allowing users to select specific datasets for their analysis while reducing input complexity. The Cloudgene application will be tailored for this use case, simplifying the pipeline's input parameters and linking datasets dynamically.</p>"},{"location":"developers/datasets/#taxprofiler-application","title":"Taxprofiler Application","text":"<p>We start with the <code>taxprofiler</code> pipeline, which fetches data based on user-provided input IDs and performs taxonomic profiling. Here is the <code>cloudgene.yaml</code> file for the <code>taxprofiler</code> pipeline:</p> <pre><code>id: taxprofiler\nname: Taxprofiler\ndescription: Taxonomic classification and profiling of shotgun short- and long-read metagenomic data\nversion: 1.1.8\nwebsite: https://github.com/nf-core/taxprofiler\nauthor: James A. Fellows Yates, Sofia Stamouli, Moritz E. Beber, and the nf-core/taxprofiler team\nlogo: https://raw.githubusercontent.com/nf-core/fetchngs/master/docs/images/nf-core-fetchngs_logo_light.png\n\nworkflow:\n  steps:\n    - name: Fetch Data\n      script: nf-core/fetchngs\n      revision: 1.12.0\n      stdout: true\n      params:\n        input: \"${input_ids}\"\n\n    - name: Run taxprofiler\n      script: nf-core/taxprofiler\n      revision: 1.1.8\n      stdout: true\n      params:\n        input: \"${outdir}/samplesheet/samplesheet.csv\"\n        databases: \"https://raw.githubusercontent.com/nf-core/test-datasets/taxprofiler/database_full_v1.2.csv\"\n        multiqc_title: \"${CLOUDGENE_JOB_NAME}\"\n\n  inputs:\n    - id: input_ids\n      description: IDs\n      type: textarea\n      value: \"SRR12696236\"\n      writeFile: \"ids.csv\"\n      serialize: false\n\n  outputs:\n    - id: outdir\n      description: Output\n      type: folder\n</code></pre> <p>This setup fetches sequence data and runs the taxprofiler pipeline using an external database. However, we want to make the database selection dynamic and allow users to choose a specific dataset for taxonomic profiling. </p>"},{"location":"developers/datasets/#datasets-for-taxprofiler","title":"Datasets for Taxprofiler","text":"<p>Datasets allow us to link the pipeline to different database options dynamically, enabling users to select the most relevant database for their analysis. We will create individual Cloudgene applications for each database dataset and link them to the <code>taxprofiler</code> pipeline.</p>"},{"location":"developers/datasets/#dataset-structure","title":"Dataset Structure","text":"<p>We will create a Cloudgene application for each database with the following structure:</p> <pre><code>database1\n\u251c\u2500\u2500 cloudgene.yaml\n\u251c\u2500\u2500 database_full_v1.2.csv\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"developers/datasets/#cloudgeneyaml-for-dataset-1","title":"<code>cloudgene.yaml</code> for Dataset 1","text":"<p>The <code>cloudgene.yaml</code> file for each dataset application will define properties to share the dataset location with the main pipeline:</p> <pre><code>name: Database 1\nversion: 1.0\ncategory: taxprofiler_database\nproperties:\n  database_url: ${CLOUDGENE_APP_LOCATION}/database_full_v1.2.csv\n</code></pre> <p>Here, the <code>database_url</code> property points to the dataset file, allowing the main pipeline to retrieve this information when the user selects the dataset. The <code>category</code> field is used to group all dataset applications, making it easier to filter and display them within the <code>taxprofiler</code> pipeline interface.</p>"},{"location":"developers/datasets/#updating-the-taxprofiler-application-to-use-datasets","title":"Updating the Taxprofiler Application to Use Datasets","text":"<p>Now, we update the <code>cloudgene.yaml</code> file for the <code>taxprofiler</code> pipeline to use datasets. Instead of hardcoding the database URL, we will allow users to select from available datasets.</p>"},{"location":"developers/datasets/#updated-cloudgeneyaml-for-taxprofiler","title":"Updated <code>cloudgene.yaml</code> for Taxprofiler","text":"<pre><code>id: taxprofiler\nname: Taxprofiler\ndescription: Taxonomic classification and profiling of shotgun short- and long-read metagenomic data\nversion: 1.1.8\n\nworkflow:\n  steps:\n    - name: Fetch Data\n      script: nf-core/fetchngs\n      revision: 1.12.0\n      stdout: true\n      params:\n        input: \"${input_ids}\"\n\n    - name: Run taxprofiler\n      script: nf-core/taxprofiler\n      revision: 1.1.8\n      stdout: true\n      params:\n        input: \"${outdir}/samplesheet/samplesheet.csv\"\n        databases: \"${database.database_url}\"\n        multiqc_title: \"${CLOUDGENE_JOB_NAME}\"\n\n  inputs:\n    - id: input_ids\n      description: IDs\n      type: textarea\n      value: \"SRR12696236\"\n      writeFile: \"ids.csv\"\n      serialize: false\n    - id: selected_database\n      description: Database\n      type: dataset\n      category: taxprofiler_database\n      serialize: false\n\n  outputs:\n    - id: outdir\n      description: Output\n      type: folder\n</code></pre>"},{"location":"developers/datasets/#explanation","title":"Explanation","text":"<ul> <li><code>dataset</code> input: The input <code>database</code> uses the <code>dataset</code> type, allowing users to select a dataset from all installed database applications that fall under the <code>datasets</code> category.</li> <li>Database link: The <code>database.database_url</code> references the <code>database_url</code> property defined in the dataset application\u2019s <code>cloudgene.yaml</code>, dynamically linking the selected database to the <code>taxprofiler</code> pipeline.</li> </ul> <p>With this setup, users can select a dataset from the available options, and the <code>taxprofiler</code> pipeline will use the corresponding database for taxonomic profiling.</p>"},{"location":"developers/datasets/#advantages-of-this-approach","title":"Advantages of This Approach","text":"<ol> <li>Dynamic Dataset Selection: Users can easily select a dataset from a predefined list without modifying the pipeline configuration.</li> <li>Separation of Concerns: The logic of dataset management is separated from the pipeline itself, making it easier to add or update datasets without changing the pipeline code.</li> <li>Scalability: As new datasets are added, they are automatically available for selection without further changes to the pipeline.</li> <li>Permission Management: Admins can control access to specific datasets through user groups, providing flexibility in shared environments.</li> </ol> <p>By using this approach, the <code>taxprofiler</code> pipeline becomes more user-friendly and adaptable, enabling seamless integration of datasets for specialized use cases.</p>"},{"location":"developers/environment_variables/","title":"Environment Variables","text":"<p>Cloudgene supports several environment variables that can be used in your <code>cloudgene.yaml</code> files to get informations about the application itself and the submitted job.</p>"},{"location":"developers/environment_variables/#application","title":"Application","text":"Variable Description <code>${CLOUDGENE_APP_ID}</code> The id of the application. <code>${CLOUDGENE_APP_VERSION}</code> The version of the application. <code>${CLOUDGENE_APP_LOCATION}</code> The local folder path of the application."},{"location":"developers/environment_variables/#job","title":"Job","text":"Variable Description <code>${CLOUDGENE_JOB_ID}</code> The ID of the job. <code>${CLOUDGENE_JOB_NAME}</code> The name of the job."},{"location":"developers/environment_variables/#user","title":"User","text":"Variable Description <code>${CLOUDGENE_USER_NAME}</code> The username of the user. <code>${CLOUDGENE_USER_EMAIL}</code> The email address of the user. <code>${CLOUDGENE_USER_FULL_NAME}</code> The full name of the user."},{"location":"developers/environment_variables/#service","title":"Service","text":"Variable Description <code>${CLOUDGENE_SERVICE_NAME}</code> The name of the service. <code>${CLOUDGENE_SERVICE_URL}</code> The full URL of the service. <code>${CLOUDGENE_CONTACT_EMAIL}</code> The contact email of the service administrator. <code>${CLOUDGENE_CONTACT_NAME}</code> The contact name of the service administrator. <code>${CLOUDGENE_SMTP_HOST}</code> The SMTP host for email services. <code>${CLOUDGENE_SMTP_PORT}</code> The SMTP port for email services. <code>${CLOUDGENE_SMTP_USER}</code> The SMTP user for email services. <code>${CLOUDGENE_SMTP_PASSWORD}</code> The SMTP password for email services. <code>${CLOUDGENE_SMTP_NAME}</code> The SMTP name for email services. <code>${CLOUDGENE_SMTP_SENDER}</code> The SMTP sender name for email services. <code>${CLOUDGENE_WORKSPACE_TYPE}</code> The type of external workspace. <code>${CLOUDGENE_WORKSPACE_HOME}</code> The location of the external workspace."},{"location":"developers/environment_variables/#example","title":"Example","text":"<pre><code>id: print-username\nname: Print Username Example\nversion: 1.0.0\nworkflow:\n  steps:\n    - name: \"Say hello\"\n      type: \"command\"\n      cmd: \"/bin/echo hey ${CLOUDGENE_USER_NAME}\"\n      stdout: \"true\"\n</code></pre>"},{"location":"developers/inputs/","title":"Inputs","text":"<p>Input parameters define which files or information the end user must provide. For example, if you have a workflow that analyzes a CSV file, you can define an input parameter to ask the user to upload their data file.</p> <p>Cloudgene supports files, folders and basic input fields for numbers or strings. The Cloudgene web interface is dynamically created based on these input parameters.</p> <p>Input parameters are defined in the <code>inputs</code> section, where each parameter is identified by a unique <code>id</code>, a textual <code>description</code>, and a <code>type</code>.</p> <pre><code>id: input-example\nname: Input Example\nversion: 1.0\nworkflow:\n  inputs:\n    - id: param1\n      description: Description of parameter 1\n      type: number\n    - id: param2\n      description: Description of parameter 2\n      type: text\n</code></pre> <p>The value of the parameter can be referenced by <code>$id</code> in the workflow.</p> <pre><code>id: input-example\nname: Input Example\nversion: 1.0\nworkflow:\n  steps:\n    - name: Name Step1\n      cmd: /bin/echo Value of Parameter 1 $param1\n      stdout: true\n  inputs:\n    - id: param1\n      description: Description of parameter\n      type: number\n</code></pre> <p></p>"},{"location":"developers/inputs/#properties","title":"Properties","text":"<p>These properties define the basic behavior of an input parameter:</p> Property Required Description <code>id</code> yes Defines an id for the parameter. <code>description</code> yes This text serves as a label for the input field. <code>type</code> yes One of the following types. <code>value</code> no Defines the default value of this parameter. This value is preselected in the job submission form (default: empty). <code>visible</code> no Defines if the input control is visible or hidden (default: true). <code>required</code> no Defines if the parameter is mandatory or can be submitted empty by the user (default: true). <code>details</code> no Provides more details about the parameter (default: empty). <code>help</code> no Contains the link to a help page for this parameter (default: empty).If a link is provided, an icon appears near the label:  <ul> <li>Add serialize</li> <li>Add writeToFile</li> </ul>"},{"location":"developers/inputs/#checkbox","title":"Checkbox","text":"<p>Creates a checkbox with two different states. The <code>values</code> property contains values that are used if the checkbox is either selected (<code>true</code>) or unselected (<code>false</code>).</p> <pre><code>- id: checkbox\n  description: Input Checkbox\n  type: checkbox\n  value: false\n  values:\n    true: valueTrue\n    false: valueFalse  \n</code></pre> <p></p>"},{"location":"developers/inputs/#file","title":"File","text":"<p>Creates a file-upload field where one file can be selected and uploaded.</p> <pre><code>- id: image\n  description: Image\n  type: file\n</code></pre> <ul> <li>The uploaded file will be copied into the local workspace.</li> <li>Contains the absolute path to the uploaded file.</li> <li>All input files will be deleted after the job run.</li> </ul>"},{"location":"developers/inputs/#folder","title":"Folder","text":"<p>Creates a file-upload field where multiple files can be selected and uploaded.</p> <pre><code>- id: images\n  description: Images\n  type: folder\n</code></pre> <ul> <li>The uploaded files will be copied into the local workspace.</li> <li>Contains the absolute path to the folder that contains all uploaded files.</li> <li>All input files will be deleted after the job run.</li> </ul>"},{"location":"developers/inputs/#filetypes","title":"Filetypes","text":"<p>The <code>accept</code> attribute specifies the types of files that the server accepts. By default, all files can be selected and uploaded.</p> <pre><code>- id: image\n  description: Image\n  type: file\n  accept: .jpg\n</code></pre> <p>To specify more than one file type, separate the values with a comma (e.g., <code>accept: .jpg, .gif</code>). Most browsers cannot handle two dots in the extension (e.g., <code>.tar.gz</code>). Please use <code>.gz</code>.</p>"},{"location":"developers/inputs/#list","title":"List","text":"<p>Creates a drop-down list with different options. The <code>values</code> property contains key/value pairs of the available options in the list:</p> <pre><code>- id: list\n  description: Input List\n  type: list\n  values:\n    keya: Value A\n    keyb: Value B\n</code></pre> <p></p>"},{"location":"developers/inputs/#text","title":"Text","text":"<p>Creates a single-line input field where text can be entered by the user.</p> <pre><code>- id: name\n  description: Name\n  type: text\n</code></pre> <p>To create a multi-line input field, set the type to <code>textarea</code>.</p> <pre><code>- id: address\n  description: Address\n  type: textarea\n</code></pre> <p></p>"},{"location":"developers/inputs/#number","title":"Number","text":"<p>Creates an input field where a number can be entered by the user.</p> <pre><code>- id: age\n  description: Age\n  type: number\n</code></pre> <p></p> <ul> <li>TODO: format? min, max, step? client-side validation needed.</li> </ul>"},{"location":"developers/inputs/#radio","title":"Radio","text":"<p>Creates radio buttons with different options. The <code>values</code> property contains key/value pairs of the available options:</p> <pre><code>- id: radio\n  description: Radio Input\n  type: radio\n  values:\n    keya: Value A\n    keyb: Value B\n</code></pre>"},{"location":"developers/inputs/#terms-checkbox","title":"Terms Checkbox","text":"<p>Creates a checkbox that must be selected before the job can be submitted (e.g., the user has to agree to the terms and conditions of your service).</p> <pre><code>- id: terms\n  description: I will not attempt to re-identify or contact research participants.\n  type: terms_checkbox\n</code></pre> <p></p>"},{"location":"developers/inputs/#datasets","title":"Datasets","text":"<p>Creates a drop-down list where the user can select a dataset. Datasets are applications with properties but without a workflow object. The <code>category</code> property is optional and can be used to display only datasets from the specified category. The value of this parameter contains a map with the properties of the selected application.</p> <pre><code>- id: reference_data\n  description: Reference Data\n  type: dataset\n  category: ref-data\n</code></pre> <p>Learn more about Datasets and their advantages.</p>"},{"location":"developers/introduction/","title":"Introduction","text":"<p>This guide will walk you through creating a Cloudgene YAML file that acts as a bridge between the Nextflow pipeline and Cloudgene. We'll create a Cloudgene YAML file, define workflow steps, inputs, and outputs, and demonstrate how to set default parameters.</p> <p>The <code>nextflow_schema.json</code> and <code>cloudgene.yaml</code> files in Nextflow serve distinct purposes in managing pipeline parameters. <code>nextflow_schema.json</code> defines all possible parameters for a pipeline, including their types, default values, and validation rules, making it suitable for a broad range of use cases. It exposes all options and ensures proper configuration, which can sometimes be overwhelming for users. On the other hand, <code>cloudgene.yaml</code> is used when building a web service tailored to a specific use case. It simplifies the user experience by exposing only relevant parameters, setting defaults specific to the web service, and often combining multiple pipelines. This helps reduce the complexity for end-users by hiding unnecessary options and providing a focused, streamlined interface. While <code>nextflow_schema.json</code> maintains the pipeline\u2019s flexibility, <code>cloudgene.yaml</code> adapts it for simplified, user-friendly execution through a web interface.</p>"},{"location":"developers/introduction/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following:</p> <ul> <li>Cloudgene installed</li> <li>Nextflow installed</li> <li>Basic understanding of YAML syntax</li> </ul>"},{"location":"developers/introduction/#creating-the-cloudgene-yaml-file","title":"Creating the Cloudgene YAML File","text":"<p>The Cloudgene YAML file defines the link between the Nextflow pipeline and Cloudgene. It contains metadata about the pipeline, the workflow steps, inputs, and outputs.</p>"},{"location":"developers/introduction/#header-section","title":"Header Section","text":"<p>The header section includes basic information about the pipeline:</p> <pre><code>id: fetch-ngs\nname: FetchNGS\ndescription: Pipeline to fetch metadata and raw FastQ files from public databases\nversion: 1.12.0\nwebsite: https://github.com/nf-core/fetchngs\nauthor: Harshil Patel, Moritz E. Beber and Jose Espinosa-Carrasco\nlogo: https://raw.githubusercontent.com/nf-core/fetchngs/master/docs/images/nf-core-fetchngs_logo_light.png\n</code></pre>"},{"location":"developers/introduction/#workflow-section","title":"Workflow Section","text":"<p>The workflow section defines the steps, inputs, and outputs.</p>"},{"location":"developers/introduction/#defining-the-workflow-object","title":"Defining the Workflow Object","text":"<p>In the workflow object, we define a step that executes the <code>nf-core/fetchngs</code> pipeline at version 1.12.0:</p> <pre><code>workflow:\n  steps:\n    - name: Fetch NGS\n      script: nf-core/fetchngs\n      revision: 1.12.0\n</code></pre>"},{"location":"developers/introduction/#defining-inputs-and-outputs","title":"Defining Inputs and Outputs","text":"<p>The pipeline has one input and one output. We define the corresponding variables and their types.</p> <p>Example with File Input:</p> <pre><code>inputs:\n  - id: input\n    description: ID File\n    type: file\n\noutputs:\n  - id: outdir\n    description: Output\n    type: folder\n</code></pre> <p>Cloudgene automatically creates a user interface with input parameters. Upon submission, it generates the outputs (folders or files). All inputs and outputs are automatically added to the <code>params.json</code> file, which Cloudgene uses to execute the Nextflow workflow.</p>"},{"location":"developers/introduction/#extended-example-with-textarea-input","title":"Extended Example with Textarea Input","text":"<p>We can extend the configuration to allow users to enter a list of IDs in a textarea. Cloudgene writes this content to a file by setting the flag <code>writeFile</code>. We can also set a default value with <code>value</code>.</p> <p>Here\u2019s a complete example combining all the sections:</p> <pre><code>id: fetch-ngs\nname: FetchNGS\ndescription: Pipeline to fetch metadata and raw FastQ files from public databases\nversion: 1.12.0\nwebsite: https://github.com/nf-core/fetchngs\nauthor: Harshil Patel, Moritz E. Beber and Jose Espinosa-Carrasco\nlogo: https://raw.githubusercontent.com/nf-core/fetchngs/master/docs/images/nf-core-fetchngs_logo_light.png\n\nworkflow:\n  steps:\n    - name: Fetch NGS\n      script: nf-core/fetchngs\n      revision: 1.12.0\n      params:\n        monochrome_logs: false\n\n  inputs:\n    - id: input_ids\n      description: IDs\n      type: textarea\n      value: \"SRR12696236\"\n      writeFile: \"ids.csv\"\n      serialize: false\n\n  outputs:\n    - id: outdir\n      description: Output\n      type: folder\n</code></pre> <p>You can save the content in a file named <code>cloudgene.yaml</code> and install it with the following command:</p> <pre><code>cloudgene install /path/to/cloudgene.yaml\n</code></pre> <p>Once the webserver is started using <code>cloudgene server</code>, you can open the web interface to run the application.</p> <p>If you update the <code>cloudgene.yaml</code> file, you need to go to the Admin Panel -&gt; Applications and click on \"Reload Application\" for the changes to take effect.</p>"},{"location":"developers/introduction/#setting-default-parameters","title":"Setting Default Parameters","text":"<p>We can also set default parameters without requiring user inputs:</p> <pre><code>workflow:\n  steps:\n    - name: Fetch NGS\n      script: nf-core/fetchngs\n      revision: 1.12.0\n      params:\n        monochrome_logs: false\n</code></pre>"},{"location":"developers/introduction/#excluding-parameters-from-paramsjson","title":"Excluding Parameters from <code>params.json</code>","text":"<p>In Cloudgene, all inputs and outputs are automatically added to the <code>params.json</code> file. This file is essential for Cloudgene to execute the Nextflow workflow, as it contains all parameter mappings required for the run. However, there are scenarios where it may be necessary to exclude certain parameters from being serialized into <code>params.json</code>.</p> <p>For example, you might have intermediate variables or temporary configurations that are not essential for the final execution, that you don\u2019t want to be serialized to the <code>params.json</code> file.</p> <p>To exclude a parameter from being added to <code>params.json</code>, you can use the <code>serialize</code> flag. By setting <code>serialize: false</code> for a specific parameter, you ensure that it won\u2019t be written into the JSON file.</p> <p>In the following example, a parameter <code>profiler</code> is defined for internal use, but we don\u2019t want it to be included in the <code>params.json</code> file:</p> <pre><code>workflow:\n  inputs:\n    - id: input\n      description: Samplesheet\n      type: file\n    - id: profiler\n      description: Profiler\n      type: list\n      value: kraken2\n      values:\n        kraken2: Kraken 2\n        metaphlan: MetaPhlAn\n      serialize: false\n</code></pre> <p>By setting <code>serialize: false</code>, the <code>profiler</code> will be used in the workflow, but it won\u2019t appear in the <code>params.json</code> file. We can use the <code>params</code> section in a step to remap the <code>profiler</code> to different pipeline parameters. For example:</p> <pre><code>workflow:\n  steps:\n    - name: Run taxprofiler\n      script: nf-core/taxprofiler\n      revision: 1.1.8\n      params:\n        run_kraken2: ${{profiler == \"kraken2\"}}\n        run_metaphlan: ${{profiler == \"metaphlan\"}}\n        databases: \"https://raw.githubusercontent.com/nf-core/test-datasets/taxprofiler/database_full_v1.2.csv\"\n</code></pre>"},{"location":"developers/introduction/#local-nextflow-script","title":"Local Nextflow Script","text":"<p>You can also place the <code>cloudgene.yaml</code> file directly into your pipeline directory and set the <code>script</code> property to the Nextflow script (e.g., <code>main.nf</code>). In this case, if you install the application via GitHub, Cloudgene automatically downloads the pipeline and executes the script.</p> <pre><code>workflow:\n  steps:\n    - name: Execute Pipeline\n      script: main.nf\n</code></pre>"},{"location":"developers/introduction/#connecting-pipelines","title":"Connecting Pipelines","text":"<p>Cloudgene supports the connection of multiple pipelines by allowing you to define workflows that consist of multiple steps. Each step can execute a separate pipeline, and the output of one pipeline can be passed as the input to the next.</p> <p>In this example, Cloudgene connects two Nextflow pipelines (nf-core/fetchngs and nf-core/taxprofiler) into a single workflow, making it easy to fetch data and then run a taxonomic profiler using the created samplesheet file.</p> <pre><code>id: taxprofiler\nname: Taxprofiler\ndescription: Taxonomic classification and profiling of shotgun short- and long-read metagenomic data\nversion: 1.1.8\nwebsite: https://github.com/nf-core/taxprofiler\nauthor: James A. Fellows Yates, Sofia Stamouli, Moritz E. Beber, and the nf-core/taxprofiler team\nlogo: https://raw.githubusercontent.com/nf-core/fetchngs/master/docs/images/nf-core-fetchngs_logo_light.png\n\nworkflow:\n  steps:\n    - name: Fetch Data\n      script: nf-core/fetchngs\n      revision: 1.12.0\n      stdout: true\n      params:\n        input: \"${input_ids}\"\n\n    - name: Run taxprofiler\n      script: nf-core/taxprofiler\n      revision: 1.1.8\n      stdout: true\n      params:\n        input: \"${outdir}/samplesheet/samplesheet.csv\"\n        databases: \"https://raw.githubusercontent.com/nf-core/test-datasets/taxprofiler/database_full_v1.2.csv\"\n        multiqc_title: \"${CLOUDGENE_JOB_NAME}\"\n\n  inputs:\n    - id: input_ids\n      description: IDs\n      type: textarea\n      value: \"SRR12696236\"\n      writeFile: \"ids.csv\"\n      serialize: false\n\n  outputs:\n    - id: outdir\n      description: Output\n      type: folder\n</code></pre> <p>The <code>cloudgene.yaml</code> file is hosted on GitHub. You can simply install the application with the following command:</p> <pre><code>cloudgene install lukfor/cg-taxprofiler\n</code></pre>"},{"location":"developers/introduction/#conclusion","title":"Conclusion","text":"<p>You have now created a Cloudgene YAML file that defines a Nextflow pipeline workflow with inputs, outputs, and default parameters. This configuration allows Cloudgene to generate a user interface, handle inputs and outputs, and execute the Nextflow workflow seamlessly.</p>"},{"location":"developers/outputs/","title":"Outputs","text":"<p>Output parameters can be used as placeholders for folders or files which are created by steps. Cloudgene creates and manages these folders for you as well as enables downloading the files through the web interface.</p> <p>Output parameters are defined in the <code>outputs</code> section where each parameter is defined by an unique <code>id</code>, a textual <code>description</code> and a <code>type</code>.</p> <pre><code>id: output-example\nname: Output Example\nversion: 1.0\nworkflow:\n  outputs:\n    - id: output\n      description: Output Folder\n      type: folder\n</code></pre> <p>The value of the parameter can be referenced by <code>$id</code> in the workflow. In this example, we use the <code>touch</code> command to create a file in an output folder:</p> <pre><code>id: output-example\nname: Output Example\nversion: 1.0\nworkflow:\n  steps:\n    - name: Name Step1\n      cmd: /bin/touch $output/new-file.txt\n  outputs:\n    - id: output\n      description: Output Folder\n      type: folder\n</code></pre>"},{"location":"developers/outputs/#properties","title":"Properties","text":"<p>These properties define the basic behaviour of an output parameter:</p> Property Required Description <code>id</code> yes Defines a id for the parameter <code>description</code> yes Defines a description for the parameter <code>type</code> yes One of the following types <code>download</code> no If <code>download</code> is set to true, the file or folder can be downloaded (default: true). <code>adminOnly</code> no (default: false). <ul> <li>Add serialize</li> <li>Add includes/excludes</li> </ul>"},{"location":"developers/outputs/#types","title":"Types","text":"<p>At the moment the following types of output parameters are supported:</p>"},{"location":"developers/outputs/#file","title":"<code>file</code>","text":""},{"location":"developers/outputs/#folder","title":"<code>folder</code>","text":""},{"location":"developers/reporting/","title":"Reporting in Cloudgene","text":"<p>Cloudgene supports reporting by parsing the standard output (stdout) of each process it runs. This allows users to generate detailed logs and reports using specific output commands. The functionality is similar to GitHub Actions, utilizing annotations and groups to organize and present information effectively.</p>"},{"location":"developers/reporting/#example","title":"Example","text":"main.nf cloudgene.yaml Output <pre><code>params.n = 5 // Default number of quotes to extract\n\nprocess extractRandomQuote {\n    input:\n    path quotesFile\n    val index\n\n    script:\n    \"\"\"\n    QUOTE=`shuf ${quotesFile} | head -n 1`\n    echo \"::message::\\${QUOTE}\"\n    \"\"\"\n}\n\nworkflow {\n    extractRandomQuote(\n        file(\"${projectDir}/quotes.txt\"),\n        Channel.of(1..params.n)\n    )\n}\n</code></pre> <pre><code>id: hello-cg\nname: Hello CG\nversion: 1.0\nworkflow:\nsteps:\n- name: Get quotes\n  script: main.nf\n</code></pre>"},{"location":"developers/reporting/#output-commands","title":"Output Commands","text":"<p>Cloudgene recognizes a series of specific commands in the stdout that help classify and structure log messages. Below is a list of supported commands and their usage:</p>"},{"location":"developers/reporting/#error-messages","title":"Error Messages","text":"<p>To log an error message: <pre><code>echo \"::error::This is an error message\"\n</code></pre></p>"},{"location":"developers/reporting/#general-messages","title":"General Messages","text":"<p>To log a general message: <pre><code>echo \"::message::This is a message\"\n</code></pre></p>"},{"location":"developers/reporting/#notices","title":"Notices","text":"<p>To log a notice message: <pre><code>echo \"::notice::This is a notice message\"\n</code></pre></p>"},{"location":"developers/reporting/#warnings","title":"Warnings","text":"<p>To log a warning message: <pre><code>echo \"::warning::This is a warning message\"\n</code></pre></p>"},{"location":"developers/reporting/#debug-messages","title":"Debug Messages","text":"<p>To log a debug message: <pre><code>echo \"::debug::This is a debug message\"\n</code></pre></p>"},{"location":"developers/reporting/#grouping-messages","title":"Grouping Messages","text":"<p>Cloudgene allows grouping of related log messages to enhance readability. Groups can have a specified type (e.g., error, warning) to provide additional context. Use the following commands to start and end a group:</p>"},{"location":"developers/reporting/#start-a-group","title":"Start a Group","text":"<p>To start a group: <pre><code>echo \"::group type=error::\"\n</code></pre> This will group subsequent log messages until the group is closed.</p>"},{"location":"developers/reporting/#end-a-group","title":"End a Group","text":"<p>To end a group: <pre><code>echo \"::endgroup::\"\n</code></pre></p>"},{"location":"developers/reporting/#example-group","title":"Example Group","text":"<p><pre><code>echo \"::group type=error::\"\necho \"This is a list:\"\necho \"- Line 1\"\necho \"- Line 2\"\necho \"::endgroup::\"\n</code></pre> In this example, the messages \"This is a list:\", \"- Line 1\", and \"- Line 2\" will be grouped together under an error type.</p>"},{"location":"developers/reporting/#counters","title":"Counters","text":"<p>Cloudgene supports setting and submitting counters, which can be useful for tracking various metrics during the execution of a process.</p>"},{"location":"developers/reporting/#set-a-counter","title":"Set a Counter","text":"<p>To set a counter with a specific name and value: <pre><code>echo \"::set-counter name=genomes::55\"\n</code></pre></p>"},{"location":"developers/reporting/#submit-a-counter","title":"Submit a Counter","text":"<p>To submit a counter, which can then be used for further processing or reporting: <pre><code>echo \"::submit-counter name=genomes::\"\n</code></pre></p>"},{"location":"developers/steps/BashCommand/","title":"BashCommand step","text":"<p>Cloudgene supports the execution of executable binaries.</p>"},{"location":"developers/steps/BashCommand/#parameters","title":"Parameters","text":"Parameter Required Description <code>type</code> yes Type has to be <code>command</code> <code>cmd</code> yes The command that should be executed <code>bash</code> no Enables or disable Bash specific features like pipes and loops (default: false) <code>stdout</code> no Use stdout as step's output (default: false)"},{"location":"developers/steps/BashCommand/#examples","title":"Examples","text":""},{"location":"developers/steps/BashCommand/#print-message-to-using-binecho","title":"Print message to using <code>/bin/echo</code>","text":"<p>This example shows how to forward stdout directly to the output of a step in order to display it the web-application.</p> <pre><code>id: cmd-example\nname: Command Example\nversion: 1.0\nworkflow:\n  steps:\n    - name: Print text to terminal\n      type: command\n      cmd: /bin/echo $message\n      stdout: true\n  inputs:\n    - id: message\n      description: Message\n      type: text\n</code></pre>"},{"location":"developers/steps/BashCommand/#write-message-to-a-file-using-stdout-streaming","title":"Write message to a file using stdout streaming","text":"<p>This example shows how to use Bash specific features by setting the <code>bash</code> property to <code>true</code>:</p> <pre><code>id: bash-example\nname: Bash Example\nversion: 1.0\nworkflow:\n  steps:\n    - name: Write text to file using pipes\n      type: command\n      cmd: /bin/echo $message &gt; $output\n      bash: true\n  inputs:\n    - id: message\n      description: Message\n      type: text\n  outputs:\n    - id: output\n      description: Output File\n      type: local_file\n</code></pre>"},{"location":"developers/steps/Docker/","title":"Docker step","text":"<p>Cloudgene supports the execution of commands inside a docker container.</p> <p>Tip</p> <p>All input and output parameters can be used inside the container since the workspace of a job is mounted automatically.</p>"},{"location":"developers/steps/Docker/#parameters","title":"Parameters","text":"Parameter Required Description <code>type</code> yes Type has to be <code>docker</code> <code>image</code> yes Docker image name inclusive version (e.g. library/ubuntu or biocontainers/vcftools) <code>cmd</code> yes The command that should be executed <code>stdout</code> no Use stdout as step's output (default: false)"},{"location":"developers/steps/Docker/#examples","title":"Examples","text":""},{"location":"developers/steps/Docker/#vcftools-from-biocontainers","title":"VCFTools from biocontainers","text":"<p>The following example starts an image from biocontainers and executes <code>vcftools</code> to calculate allele frequencies:</p> <pre><code>id: allele-frequencies\nname: Allele Frequencies from VCF\nversion: 1.0\nworkflow:\n  steps:\n    - name: Calculate frequencies\n      type: docker\n      image: biocontainers/vcftools\n      cmd:  vcftools --gzvcf $vcf --freq --out $output\n  inputs:\n    - id: vcf\n      description: VCF File\n      type: local_file\n  outputs:\n    - id: output\n      description: Frequencies\n      type: local_file\n</code></pre>"},{"location":"server/administration/","title":"Administration","text":"<p>This page helps you to set your Cloudgene instance in the so called Maintenance Mode to prevent users submitting jobs during system updates.</p>"},{"location":"server/administration/#maintenance-mode","title":"Maintenance Mode","text":"<p>During system updates, you can activate the Maintenance Mode for preventing any users other than administrators from submitting jobs. The front page will appear as normal when your site is in maintenance mode. Users will only see the maintenance mode message when they attempt to submit a job.</p> <p>Open the Admin Panel and click on the Server tab. Scroll down to the section Maintenance Mode. By clicking on Enter Maintenance Mode a new dialog appears where you can enter a message. By clicking on OK the Maintenance Mode is activated.</p> <p></p> <p>Users will see this message when they attempt to submit a job.</p> <p>Once your update is finished, click on Exit Maintenance Mode and your Cloudgene instance is accessible for all users.</p>"},{"location":"server/administration/#blocking-queue","title":"Blocking Queue","text":"<p>If you block the queue, then all running jobs are executed and all other jobs are waiting until the queue is manually opened.</p> <p>Open the Admin Panel and click on the Server tab. Scroll down to the section Queue. By clicking on Block Queue the queue is blocked. All new submitted jobs are in state waiting until you open the queue. The queue can be opened by clicking on Open Queue.</p>"},{"location":"server/administration/#job-retirement","title":"Job Retirement","text":"<p>You can activate Auto Retire in the configuration file. Once Auto Retire is activated, a cron job checks all completed jobs and depending on the configuration intervals it sends notification to users or deletes the results of old jobs.</p> <p>However, if Auto Retire is deactivated, it is also possible to trigger job retirement manually by clicking on the Start Retire button which is located at the bottom of the Server tab.</p> <p>Please click here to learn more about retirement on a job level.</p>"},{"location":"server/configuration/","title":"Configuration","text":"<p>This page helps you to configure Cloudgene and describes all parameters of the <code>settings.yaml</code>file. When you change a parameter in the file, you have to restart your Cloudgene instance to see the change in action.</p>"},{"location":"server/configuration/#database-connection","title":"Database connection","text":"<p>Cloudgene uses an embedded H2 database to store meta data about jobs and users:</p> <pre><code>database:\n  driver: h2\n  database: data/cloudgene\n  user: cloudgene\n  password: cloudgene\n</code></pre> <p>For production we recommend to use a MySQL database:</p> <pre><code>database:\n  driver: mysql\n  host: localhost\n  port: 3306\n  user: cloudgene\n  password: cloudgene\n</code></pre>"},{"location":"server/configuration/#mail-server","title":"Mail Server","text":"<p>If no mail server is set, new registered users are activated immediately and no confirmation links are sent. This can be activated by defining a local or remote SMTP mail server:</p> <pre><code>mail:\n  smtp: localhost\n  port: 25\n  user: username\n  password: password\n  # the email address that Cloudgene uses to send emails\n  name: noreply@domain.com\n</code></pre>"},{"location":"server/configuration/#web-application","title":"Web-Application","text":"<p>Change the name of your service. If you plan to run Cloudgene on a sub-directory, then you can change the url-prefix.</p> <pre><code># the name of your service [default: Cloudgene]\nname: My Service\n# port [default: 8082]\nport: 8082\n# max file size that can be uploaded in Bytes. -1 is unlimited [deafult: -1]\nuploadLimit: 50000\n# server name\nserverName: \"https://localhost:8082\"\n# base url of the web-application [default: empty]\nbaseUrl: /my-service\n</code></pre>"},{"location":"server/configuration/#security","title":"Security","text":"<p>Please change the secretKey to generate JWT tokens:</p> <pre><code># use this secret key to generate JWT tokens.\n# please use a secret random string\nsecretKey: some-random-string\n</code></pre>"},{"location":"server/configuration/#directories-and-workspace","title":"Directories and Workspace","text":"<p>If your service produces a lot of data, it could be useful to set the workspace directories to an other disc. The following directories can be changed:</p> <pre><code># location for temporary files (e.g. cached file uploads) [default: tmp]\ntempPath: tmp\n# location for the results of a job [default: workspace]\nlocalWorkspace: /mnt/new-disc/workspace\n</code></pre>"},{"location":"server/configuration/#downloads","title":"Downloads","text":"<p>For security reasons, files can be downloaded 10 times. Users will get an error message, when this number is succeeded. The maximal number of downloads can be increased or set to <code>-1</code> in order to allow unlimited downloads:</p> <pre><code># max number of downloads [default: 10]\n# use -1 for unlimited downloads\nmaxDownloads: 10\n</code></pre> <p>Download counters can also be deactivated for specific jobs in the Admin Panel.</p>"},{"location":"server/configuration/#queue","title":"Queue","text":"<p>Cloudgene manages two different queues to execute setup steps and workflow steps for a job. The number of jobs which are executed in parallel can be set for each queue independently:</p> <pre><code># max. n jobs can execute their setup steps in parallel [default: 5]\nthreadsSetupQueue: 5\n# max. n jobs can execute their workflow steps in parallel  [default: 5]\nthreadsQueue: 5\n# each user can run max. n jobs at the same time  [default: 2]\nmaxRunningJobsPerUser: 2\n</code></pre>"},{"location":"server/configuration/#auto-retire","title":"Auto-Retire","text":"<p>To change the default values please adapt the following parameters in your <code>settings.yaml</code> file:</p> <pre><code># retire jobs after x days [default: 6]\nretireAfter: 6\n# sent notification after x days [default: 4]\nnotificationAfter: 4\n# perform retire as a cronjob [default: false].\nautoRetire: true\n# perform retire cronjob every x hours [default: 5].\nautoRetireInterval: 5\n</code></pre> <p>Important</p> <p>If <code>autoRetire</code> is set to <code>false</code>, you have to click on the Retire button in Administrator Dashboard to clean up.</p>"},{"location":"server/configure-nextflow/","title":"Configure Nextflow","text":"<p>This page helps you configure Nextflow and describes all parameters.</p> <p>Cloudgene automatically creates different <code>nextflow.config</code> files and adds them sequentially to the execution. The first is the <code>nextflow.global.config</code> file, and the second is the <code>nextflow.app.config</code> file. This combination allows you to share configurations among all applications or overwrite them with specific settings or default parameters.</p>"},{"location":"server/configure-nextflow/#global-nextflow-settings","title":"Global Nextflow Settings","text":"<p>To configure your Nextflow settings, you can access the configuration file in Admin/Settings/Nextflow and fine-tune it according to your specific needs. Additionally, Nextflow offers robust support for environment variables, allowing you to easily integrate Cloudgene variables into your configuration. The <code>nextflow.config</code> file applies to all applications.</p> Variable Description <code>${CLOUDGENE_SERVICE_NAME}</code> The name of the service. <code>${CLOUDGENE_SERVICE_URL}</code> The full URL of the service. <code>${CLOUDGENE_CONTACT_EMAIL}</code> The contact email of the service administrator. <code>${CLOUDGENE_CONTACT_NAME}</code> The contact name of the service administrator. <code>${CLOUDGENE_SMTP_HOST}</code> The SMTP host for email services. <code>${CLOUDGENE_SMTP_PORT}</code> The SMTP port for email services. <code>${CLOUDGENE_SMTP_USER}</code> The SMTP user for email services. <code>${CLOUDGENE_SMTP_PASSWORD}</code> The SMTP password for email services. <code>${CLOUDGENE_SMTP_NAME}</code> The SMTP name for email services. <code>${CLOUDGENE_SMTP_SENDER}</code> The SMTP sender name for email services. <code>${CLOUDGENE_WORKSPACE_TYPE}</code> The type of external workspace. <code>${CLOUDGENE_WORKSPACE_HOME}</code> The location of the external workspace."},{"location":"server/configure-nextflow/#examples","title":"Examples","text":"<p>Configure email:</p> <pre><code>// Mail configuration\nparams.send_mail = true\nmail {\n    from = \"${CLOUDGENE_SMTP_NAME}\"\n    smtp.host = \"${CLOUDGENE_SMTP_HOST}\"\n    smtp.port = \"${CLOUDGENE_SMTP_PORT}\"\n}\n</code></pre>"},{"location":"server/configure-nextflow/#application-specific-nextflow-settings","title":"Application-Specific Nextflow Settings","text":"<p>For each application, custom Nextflow configurations can be made. File configurations can be changed in Admin/Applications by clicking on the cog icon.</p> <p>For each application, a custom profile can be set. The profile to be used for pipeline execution (e.g., a nf-core pipeline supports 'docker', 'conda', 'singularity', or 'AWSBATCH').</p> <p>For each application, a working directory can be set. Cloudgene creates a temporary work directory for each job and deletes it after execution. You can change this or set it to an S3 path if you use AWS Batch.</p> <p>In addition to the variables listed in \"Global Nextflow Settings\", the following are available:</p> Variable Description <code>${CLOUDGENE_APP_ID}</code> The ID of the application. <code>${CLOUDGENE_APP_VERSION}</code> The version of the application. <code>${CLOUDGENE_APP_LOCATION}</code> The local folder path of the application. <code>${CLOUDGENE_JOB_ID}</code> The ID of the job. <code>${CLOUDGENE_JOB_NAME}</code> The name of the job. <code>${CLOUDGENE_USER_NAME}</code> The username of the user. <code>${CLOUDGENE_USER_EMAIL}</code> The email address of the user. <code>${CLOUDGENE_USER_FULL_NAME}</code> The full name of the user."},{"location":"server/customization/","title":"Customization","text":"<p>This page helps you to customize Cloudgene and describes how to change templates and add new pages.</p>"},{"location":"server/customization/#general","title":"General","text":""},{"location":"server/customization/#service-name-and-colors","title":"Service Name and Colors","text":"<p>Open the Admin Panel and click on Settings -&gt; General. Change the name of your service and set the background color of the navigation bar to your preferred color.</p> <p>Click on Exit to see your changes in action:</p>"},{"location":"server/customization/#footer","title":"Footer","text":"<p>Open the Admin Panel and click on Settings -&gt; Templates. Go to the row with Key FOOTER and click on the Edit button located on the right side. Change the text to your needs.</p> <p>Please support Cloudgene by adding a link to our website inside your footer:</p> <pre><code>powered by &lt;a href=\"http://cloudgene.uibk.ac.at\"&gt;Cloudgene&lt;/a&gt;\n</code></pre>"},{"location":"server/customization/#default-pages","title":"Default pages","text":"<p>Every Cloudgene instance has two default pages that are required, but they can be overwritten with your own content.</p>"},{"location":"server/customization/#welcome-page","title":"Welcome page","text":"<p>Create a file <code>home.stache</code> in folder <code>${CLOUDGENE_HOME}/pages</code> and use HTML to adapt it to your needs. Since Cloudgene is based on Bootstrap4, all available CSS classes can be used. For example:</p> <pre><code>&lt;div class=\"jumbotron jumbotron-fluid text-white\" style=\"background: #FF0000;\"&gt;\n  &lt;div class=\"container\"&gt;\n    &lt;h1&gt;Welcome to Service XY!&lt;/h1&gt;\n    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute\n      irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=\"container bd-content\" style=\"margin-bottom: 0px;\"&gt;\n  &lt;h3&gt;More details&lt;/h3&gt;\n  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute\n    irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>If you restart Cloudgene, the updated welcome page appears.</p> <p>Moreover, you can use the following mustache syntax inside of your template to deliver different content for public and registered users:</p> <pre><code>{{#is(loggedIn, true)}}\n  &lt;p&gt;\n    Hey! You are now logged in!\n  &lt;/p&gt;\n{{else}}\n  &lt;p&gt;\n    Hey stranger!\n  &lt;/p&gt;\n{{/is}}\n</code></pre>"},{"location":"server/customization/#contact-page","title":"Contact page","text":"<p>Create a file <code>contact.stache</code> in folder <code>${CLOUDGENE_HOME}/pages</code> and use HTML to adapt it to your needs:</p> <pre><code>&lt;h2&gt;Contact&lt;/h2&gt;\n&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;\n</code></pre> <p>If you restart Cloudgene, the updated contact page appears.</p>"},{"location":"server/customization/#custom-pages","title":"Custom pages","text":"<p>Cloudgene supports custom pages to create service specific content (e.g. help pages).</p> <p>Create a new <code>*.stache</code> file in folder <code>${CLOUDGENE_HOME}/pages</code> and give it a name (e.g. <code>mypage.stache</code>). Use HTML to adapt it to your needs:</p> <pre><code>&lt;h2&gt;My Page&lt;/h2&gt;\n&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;\n</code></pre> <p>Next, open the configuration file <code>config/settings.yaml</code> and add the page to the navigation. The id of the navigation item has to be the filename without the extension and <code>link</code> needs the prefix #!pages/ (you need to set double quotes around the link). For example:</p> <pre><code>navigation:\n  - id: mypage\n    name: My Page\n    link: \"#!pages/mypage\"\n</code></pre> <p>If you restart Cloudgene, the new page appears in the navigation bar and with a click on the item the new page appears:</p>"},{"location":"server/customization/#custom-navigation","title":"Custom Navigation","text":"<p>The navigation bar is full customizable and can be changed by adapt the <code>navigation</code> block in <code>config/settings.yaml</code>.</p>"},{"location":"server/customization/#link-to-external-websites","title":"Link to external websites","text":"<p>It is also possible to create navigation items that open a website on a different server. For this, you have to set the link property to  a URL starting with http://. For example:</p> <pre><code>navigation:\n  - id: cloudgene-sote\n    name: Cloudgene Website\n    link: \"http://cloudgene.io\"\n</code></pre>"},{"location":"server/customization/#submenus","title":"Submenus","text":"<p>You can group different links together by creating submenus. Such a submenu can be created by adding a new item to the <code>navigation</code> block and by setting the <code>items</code> key instead of <code>link</code>. For example:</p> <pre><code>navigation:\n  - id: mypages\n    name: My Pages\n    items:\n    - id: mypage\n      name: My Page\n      link: \"#!pages/mypage\"\n    - id: cloudgene-sote\n      name: Cloudgene Website\n      link: \"http://cloudgene.io\"    \n</code></pre> <p>If you restart Cloudgene, the submenu appears in the navigation bar:</p>"},{"location":"server/customization/#mail-notifications","title":"Mail Notifications","text":"<p>Open the Admin Panel and click on Settings -&gt; Templates. All available text snippets used in notification mails can be changed by clicking on the Edit button.</p>"},{"location":"server/getting-started/","title":"Getting Started","text":"<p>This guide will help you start Cloudgene and install your first application. You must install Cloudgene properly on your computer before you can begin.</p>"},{"location":"server/getting-started/#start-the-cloudgene-server","title":"Start the Cloudgene Server","text":"<p>The web server can be started with the following command:</p> <pre><code>./cloudgene server\n</code></pre> <p>The web service is available at http://localhost:8082. Please use the username <code>admin</code> and password <code>admin1978</code> to log in. The default port can be changed in the configuration file.</p>"},{"location":"server/getting-started/#install-your-first-application","title":"Install Your First Application","text":"<p>Stop the web service by pressing <code>CTRL-C</code>. The cg-fetchngs application can be installed using the following command:</p> <pre><code>./cloudgene install lukfor/cg-fetchngs\n</code></pre> <p>Next, restart Cloudgene with the following command:</p> <pre><code>./cloudgene server\n</code></pre> <p>Open Cloudgene in your browser and log in. A new menu item, Run, will appear in the menu bar. Click on it to start a new job:</p> <p></p> <p>The cg-fetchngs application starts the nf-core pipeline, downloads the entered IDs, and provides the results for download.</p> <p></p>"},{"location":"server/getting-started/#whats-next","title":"What's Next?","text":"<ul> <li>Install additional applications</li> <li>Configure and customize Cloudgene to support email notifications and SSL certificates.</li> <li>Learn how to manage permissions and handle jobs.</li> </ul>"},{"location":"server/install-apps/","title":"Install Applications","text":""},{"location":"server/install-apps/#web-application","title":"Web Application","text":"<p>Open the Admin Panel and click on the Applications tab to see all installed applications.</p> <p>By clicking on the Install Apps button, you can install an application either by entering a URL (HTTP or a local path) or by selecting from GitHub and entering a repository, optionally specifying a version.</p> <p></p> <p></p> <p>Depending on your Internet connection and computer resources, it may take several minutes. If the installation was successful, you should see your application in the Applications tab:</p> <p></p> <p>You can click on Disable to deactivate the application or on Uninstall to remove it from your Cloudgene instance. Moreover, you can change permissions to define which users have access to this application.</p>"},{"location":"server/install-apps/#command-line","title":"Command Line","text":""},{"location":"server/install-apps/#install-an-application","title":"Install an Application","text":"<p>You can also install applications by using the <code>install</code> command. Cloudgene installs all applications in the folder <code>apps</code>.</p> <pre><code>cloudgene install &lt;location&gt;\n</code></pre> <p><code>location</code> can be a zip file or a yaml file accessible via HTTP or located on the local filesystem. For example, the following command installs an application that is hosted on a web server:</p> <pre><code>cloudgene install https://github.com/lukfor/cg-fetchngs/archive/master.zip\n</code></pre> <p>You can also install applications directly from GitHub. For example, the latest version of the cg-fetchngs application can be installed using the following command:</p> <pre><code>cloudgene install lukfor/cg-fetchngs\n</code></pre> <p>To install a specific version of an application, you can specify a git tag:</p> <pre><code>cloudgene install lukfor/cg-fetchngs@1.0.0\n</code></pre> <p>The IDs are created automatically for all applications (e.g., <code>cg-fetchngs@1.0.0</code>).</p>"},{"location":"server/install-apps/#list-installed-applications","title":"List Installed Applications","text":"<p>A list of all installed applications can be shown with the <code>ls</code> command:</p> <pre><code>cloudgene ls\n</code></pre> <p>This list prints the name and version of an application and shows you if an application has any syntax errors.</p>"},{"location":"server/install-apps/#remove-applications","title":"Remove Applications","text":"<p>An installed application can be removed with the <code>remove</code> command:</p> <pre><code>cloudgene remove &lt;id&gt;\n</code></pre> <p>For example, to remove cg-fetchngs 1.0.0:</p> <pre><code>cloudgene remove cg-fetchngs@1.0.0\n</code></pre>"},{"location":"server/introduction/","title":"Introduction","text":"<p>This page helps you to run Cloudgene in production.</p> <p>You will need to install Cloudgene before you can start with this guide.</p> <p>Moreover, we recommend to use MySQL and setup SSL certificates.</p>"},{"location":"server/jobs/","title":"Manage Jobs","text":"<p>Open the Admin Panel and click on the Jobs tab to see a list of all running and completed jobs.</p> <p>Click on the job name to see details about the job or click on Actions to open a menu with all available actions.</p>"},{"location":"server/jobs/#queued-jobs","title":"Queued Jobs","text":"<p>The following actions are available for jobs with status waiting and which are in one of the two queues.</p> <ul> <li> <p>Add to top of queue</p> <p>The prriority of the job is set to 0 which means that the job moves to the top of the queue and will processed as soon as the needed resources are available.</p> </li> </ul>"},{"location":"server/jobs/#completed-jobs","title":"Completed Jobs","text":"<p>The following actions are available for jobs with status success.</p> <ul> <li> <p>Reset download counters</p> <p>For security reasons, files can be downloaded 10 times (the value can be changed in the configuration. In case of download errors or other reasons the number of possible downloads can be reset for all files.</p> </li> <li> <p>Deactivate download counters</p> <p>Deactivates the download counter for all results of the selected job. Only files of this job can be downloaded unlimited times. All other jobs are unaffected. To change it globally see configuration.</p> </li> <li> <p>Send retire notification</p> <p>By clicking on this item, the notification of job retirement is sent to the user and the retire date (see column valid until) is set according the configuration.</p> </li> <li> <p>Retire job now</p> <p>By clicking on this item, the job is retired immediately without sending an notification to the user. Before all data of the selected job is deleted, a confirmation dialog appears.</p> </li> </ul>"},{"location":"server/jobs/#retired-jobs","title":"Retired Jobs","text":"<p>The following actions are available for jobs with status success and a valid until date.</p> <ul> <li> <p>Increase retire date</p> <p>If a job has a retire date (see column valid until), the date can be increased by clicking on this menu item. A dialog appears where the number of days of the extension can be set.</p> </li> </ul>"},{"location":"server/permissions/","title":"Manage Permissions","text":"<p>This page helps you manage permissions at the application and user level.</p>"},{"location":"server/permissions/#applications","title":"Applications","text":"<p>When you install a new application, the permission group of the new application is automatically set to the group User.</p> <p>Open the Admin Panel and click on the Applications tab to see all installed applications.</p> <p></p> <p>Click on the User button, and a new dialog will appear that lists all available groups. You can assign multiple groups per application. For example, you can change the group from User to Admin to restrict access to this application only to users with administration privileges.</p> <p></p>"},{"location":"server/permissions/#creating-new-groups","title":"Creating New Groups","text":"<p>If you want to create a new group, please select New Group... and enter a name for the new group (e.g., beta-tester).</p> <p></p> <p>By clicking on OK, the permission group of the selected application is updated. Now, only users who are members of beta-tester can use this application.</p>"},{"location":"server/permissions/#users","title":"Users","text":"<p>When a new user is registered, the user is a member of the group User. This user has access to all applications with the permission group User. A user can be part of one or more groups. Users in the group Admin have access to all applications.</p> <p>Open the Admin Panel and click on the Users tab to see all users.</p> <p></p> <p>By clicking on the User button, a new dialog will appear that lists all available groups.</p> <p></p> <p>The newly created group beta-tester from the example above is now listed. Click on the checkbox to add the selected user to this new group and close the dialog by clicking on OK.</p> <p>The user is now a member of User and beta-tester and has access to the Hello Cloudgene app.</p>"}]}